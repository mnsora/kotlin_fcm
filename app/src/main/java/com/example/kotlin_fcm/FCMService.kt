package com.example.kotlin_fcmimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.app.PendingIntentimport android.content.Contextimport android.content.Intentimport android.media.RingtoneManagerimport android.os.Buildimport android.util.Logimport androidx.core.app.NotificationCompatimport com.google.firebase.messaging.FirebaseMessagingServiceimport com.google.firebase.messaging.RemoteMessageclass FCMService : FirebaseMessagingService() {    companion object {        private const val NOTIFICATION_CHANNEL_ID = "ANY_CHANNEL_YOU_WANT_HERE"        private const val NOTIFICATION_ID = 100        private const val TAG = "MYTAG"    }    override fun onNewToken(token: String) {        super.onNewToken(token)        sendRegistrationToServer(token)    }    override fun onMessageReceived(remoteMessage: RemoteMessage) {        super.onMessageReceived(remoteMessage)        val title: String?        val body: String?        if (remoteMessage.data.isNotEmpty()) {            title = remoteMessage.data["title"]            body = remoteMessage.data["body"]        } else {            title = remoteMessage.notification!!.title            body = remoteMessage.notification!!.body        }        showNotification(title, body)    }    private fun showNotification(title: String?, message: String?) {        val intent = Intent(this, MainActivity::class.java)        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)        val pendingIntent = PendingIntent.getActivity(this, 0, intent,            PendingIntent.FLAG_ONE_SHOT)        val defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)        val notificationBuilder = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)            .setSmallIcon(R.drawable.ic_launcher_background)            .setContentTitle(title)            .setContentText(message)            .setAutoCancel(true)            .setSound(defaultSoundUri)            .setContentIntent(pendingIntent)            .build()        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager        // Since android Oreo notification channel is needed.        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val channel = NotificationChannel(                NOTIFICATION_CHANNEL_ID,                "Channel human readable title",                NotificationManager.IMPORTANCE_DEFAULT)            notificationManager.createNotificationChannel(channel)        }        notificationManager.notify(NOTIFICATION_ID, notificationBuilder)    }    private fun sendRegistrationToServer(token: String?) {        Log.i(TAG, "sendRegistrationTokenToThirdServer($token)")    }}